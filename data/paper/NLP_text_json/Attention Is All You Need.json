{
    "Abstract": "The dominant sequence transduction models are based on complex recurrent orconvolutional neural networks that include an encoder and a decoder. The bestperforming models also connect the encoder and decoder through an attentionmechanism. We propose a new simple network architecture, the Transformer,based solely on attention mechanisms, dispensing with recurrence and convolutionsentirely. Experiments on two machine translation tasks show these models tobe superior in quality while being more parallelizable and requiring significantlyless time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, includingensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,our model establishes a new single-model state-of-the-art BLEU score of 41.8 aftertraining for 3.5 days on eight GPUs, a small fraction of the training costs of thebest models from the literature. We show that the Transformer generalizes well toother tasks by applying it successfully to English constituency parsing both withlarge and limited training data.",
    "Keywords": null,
    "Body": [
        "IntroductionRecurrent neural networks, long short-term memory [ 13] and gated recurrent [ 7] neural networksin particular, have been firmly established as state of the art approaches in sequence modeling and\u0003Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and startedthe effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models andhas been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-headattention and the parameter-free position representation and became the other person involved in nearly everydetail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase andtensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, andefficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of andimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively acceleratingour research.",
        "yWork performed while at Google Brain.",
        "zWork performed while at Google Research.",
        "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.arXiv:1706.03762v5  [cs.CL]  6 Dec 2017",
        "transduction problems such as language modeling and machine translation [ 35,2,5]. Numerousefforts have since continued to push the boundaries of recurrent language models and encoder-decoderarchitectures [38, 24, 15].",
        "Recurrent models typically factor computation along the symbol positions of the input and outputsequences. Aligning the positions to steps in computation time, they generate a sequence of hiddenstatesht, as a function of the previous hidden state ht\u00001and the input for position t. This inherentlysequential nature precludes parallelization within training examples, which becomes critical at longersequence lengths, as memory constraints limit batching across examples. Recent work has achievedsignificant improvements in computational efficiency through factorization tricks [ 21] and conditionalcomputation [ 32], while also improving model performance in case of the latter. The fundamentalconstraint of sequential computation, however, remains.",
        "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-tion models in various tasks, allowing modeling of dependencies without regard to their distance inthe input or output sequences [ 2,19]. In all but a few cases [ 27], however, such attention mechanismsare used in conjunction with a recurrent network.",
        "In this work we propose the Transformer, a model architecture eschewing recurrence and insteadrelying entirely on an attention mechanism to draw global dependencies between input and output.",
        "The Transformer allows for significantly more parallelization and can reach a new state of the art intranslation quality after being trained for as little as twelve hours on eight P100 GPUs.",
        "2 BackgroundThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet [ 18] and ConvS2S [ 9], all of which use convolutional neural networks as basic buildingblock, computing hidden representations in parallel for all input and output positions. In these models,the number of operations required to relate signals from two arbitrary input or output positions growsin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makesit more difficult to learn dependencies between distant positions [ 12]. In the Transformer this isreduced to a constant number of operations, albeit at the cost of reduced effective resolution dueto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention asdescribed in section 3.2.",
        "Self-attention, sometimes called intra-attention is an attention mechanism relating different positionsof a single sequence in order to compute a representation of the sequence. Self-attention has beenused successfully in a variety of tasks including reading comprehension, abstractive summarization,textual entailment and learning task-independent sentence representations [4, 27, 28, 22].",
        "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering andlanguage modeling tasks [34].",
        "To the best of our knowledge, however, the Transformer is the first transduction model relyingentirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution. In the following sections, we will describe the Transformer, motivateself-attention and discuss its advantages over models such as [17, 18] and [9].",
        "3 Model ArchitectureMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,35].",
        "Here, the encoder maps an input sequence of symbol representations (x1;:::;x n)to a sequenceof continuous representations z= (z1;:::;z n). Given z, the decoder then generates an outputsequence (y1;:::;y m)of symbols one element at a time. At each step the model is auto-regressive[10], consuming the previously generated symbols as additional input when generating the next.",
        "The Transformer follows this overall architecture using stacked self-attention and point-wise, fullyconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,respectively.",
        "Figure 1: The Transformer - model architecture.",
        "3.1 Encoder and Decoder StacksEncoder: The encoder is composed of a stack of N= 6 identical layers. Each layer has twosub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. We employ a residual connection [ 11] around each ofthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer isLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layeritself. To facilitate these residual connections, all sub-layers in the model, as well as the embeddinglayers, produce outputs of dimension dmodel = 512 .",
        "Decoder: The decoder is also composed of a stack of N= 6identical layers. In addition to the twosub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-headattention over the output of the encoder stack. Similar to the encoder, we employ residual connectionsaround each of the sub-layers, followed by layer normalization. We also modify the self-attentionsub-layer in the decoder stack to prevent positions from attending to subsequent positions. Thismasking, combined with fact that the output embeddings are offset by one position, ensures that thepredictions for position ican depend only on the known outputs at positions less than i.",
        "3.2 AttentionAn attention function can be described as mapping a query and a set of key-value pairs to an output,where the query, keys, values, and output are all vectors. The output is computed as a weighted sumof the values, where the weight assigned to each value is computed by a compatibility function of thequery with the corresponding key.",
        "Scaled Dot-Product AttentionMulti-Head AttentionFigure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of severalattention layers running in parallel.",
        "3.2.1 Scaled Dot-Product AttentionWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists ofqueries and keys of dimension dk, and values of dimension dv. We compute the dot products of thequery with all keys, divide each bypdk, and apply a softmax function to obtain the weights on thevalues.",
        "In practice, we compute the attention function on a set of queries simultaneously, packed togetherinto a matrix Q. The keys and values are also packed together into matrices KandV. We computethe matrix of outputs as:",
        "Attention(Q;K;V ) = softmax(QKTpdk)V (1)",
        "The two most commonly used attention functions are additive attention [ 2], and dot-product (multi-plicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factorof1pdk. Additive attention computes the compatibility function using a feed-forward network witha single hidden layer. While the two are similar in theoretical complexity, dot-product attention ismuch faster and more space-efficient in practice, since it can be implemented using highly optimizedmatrix multiplication code.",
        "While for small values of dkthe two mechanisms perform similarly, additive attention outperformsdot product attention without scaling for larger values of dk[3]. We suspect that for large values ofdk, the dot products grow large in magnitude, pushing the softmax function into regions where it hasextremely small gradients4. To counteract this effect, we scale the dot products by1pdk.",
        "3.2.2 Multi-Head AttentionInstead of performing a single attention function with dmodel-dimensional keys, values and queries,we found it beneficial to linearly project the queries, keys and values htimes with different, learnedlinear projections to dk,dkanddvdimensions, respectively. On each of these projected versions ofqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensionaloutput values. These are concatenated and once again projected, resulting in the final values, asdepicted in Figure 2.",
        "4To illustrate why the dot products get large, assume that the components of qandkare independent randomvariables with mean 0and variance 1. Then their dot product, q\u0001k=Pdki=1qiki, has mean 0and variance dk.",
        "Multi-head attention allows the model to jointly attend to information from different representationsubspaces at different positions. With a single attention head, averaging inhibits this.",
        "MultiHead( Q;K;V ) = Concat(head 1;:::;head h)WOwhere head i= Attention( QWQi;KWKi;VWVi)",
        "Where the projections are parameter matrices WQi2Rdmodel\u0002dk,WKi2Rdmodel\u0002dk,WVi2Rdmodel\u0002dvandWO2Rhdv\u0002dmodel.",
        "In this work we employ h= 8 parallel attention layers, or heads. For each of these we usedk=dv=dmodel=h= 64 . Due to the reduced dimension of each head, the total computational costis similar to that of single-head attention with full dimensionality.",
        "3.2.3 Applications of Attention in our ModelThe Transformer uses multi-head attention in three different ways:",
        "\u000fIn \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,and the memory keys and values come from the output of the encoder. This allows everyposition in the decoder to attend over all positions in the input sequence. This mimics thetypical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38, 2, 9].",
        "\u000fThe encoder contains self-attention layers. In a self-attention layer all of the keys, valuesand queries come from the same place, in this case, the output of the previous layer in theencoder. Each position in the encoder can attend to all positions in the previous layer of theencoder.",
        "\u000fSimilarly, self-attention layers in the decoder allow each position in the decoder to attend toall positions in the decoder up to and including that position. We need to prevent leftwardinformation flow in the decoder to preserve the auto-regressive property. We implement thisinside of scaled dot-product attention by masking out (setting to \u00001) all values in the inputof the softmax which correspond to illegal connections. See Figure 2.",
        "3.3 Position-wise Feed-Forward NetworksIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fullyconnected feed-forward network, which is applied to each position separately and identically. Thisconsists of two linear transformations with a ReLU activation in between.",
        "While the linear transformations are the same across different positions, they use different parametersfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.",
        "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionalitydff= 2048 .",
        "3.4 Embeddings and SoftmaxSimilarly to other sequence transduction models, we use learned embeddings to convert the inputtokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-mation and softmax function to convert the decoder output to predicted next-token probabilities. Inour model, we share the same weight matrix between the two embedding layers and the pre-softmaxlinear transformation, similar to [ 30]. In the embedding layers, we multiply those weights bypdmodel.",
        "3.5 Positional EncodingSince our model contains no recurrence and no convolution, in order for the model to make use of theorder of the sequence, we must inject some information about the relative or absolute position of the5",
        "Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operationsfor different layer types. nis the sequence length, dis the representation dimension, kis the kernelsize of convolutions and rthe size of the neighborhood in restricted self-attention.",
        "Layer Type Complexity per Layer Sequential Maximum Path LengthOperationsSelf-Attention O(n2\u0001d) O(1) O(1)",
        "Recurrent O(n\u0001d2) O(n) O(n)",
        "Convolutional O(k\u0001n\u0001d2)O(1) O(logk(n))",
        "Self-Attention (restricted) O(r\u0001n\u0001d)O(1) O(n=r)",
        "tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at thebottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodelas the embeddings, so that the two can be summed. There are many choices of positional encodings,learned and fixed [9].",
        "In this work, we use sine and cosine functions of different frequencies:",
        "PE(pos;2i)=sin(pos=100002i=d model)",
        "PE(pos;2i+1)=cos(pos=100002i=d model)",
        "whereposis the position and iis the dimension. That is, each dimension of the positional encodingcorresponds to a sinusoid. The wavelengths form a geometric progression from 2\u0019to10000\u00012\u0019. Wechose this function because we hypothesized it would allow the model to easily learn to attend byrelative positions, since for any fixed offset k,PEpos+kcan be represented as a linear function ofPEpos.",
        "We also experimented with using learned positional embeddings [ 9] instead, and found that the twoversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal versionbecause it may allow the model to extrapolate to sequence lengths longer than the ones encounteredduring training.",
        "4 Why Self-AttentionIn this section we compare various aspects of self-attention layers to the recurrent and convolu-tional layers commonly used for mapping one variable-length sequence of symbol representations(x1;:::;x n)to another sequence of equal length (z1;:::;z n), withxi;zi2Rd, such as a hiddenlayer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention weconsider three desiderata.",
        "One is the total computational complexity per layer. Another is the amount of computation that canbe parallelized, as measured by the minimum number of sequential operations required.",
        "The third is the path length between long-range dependencies in the network. Learning long-rangedependencies is a key challenge in many sequence transduction tasks. One key factor affecting theability to learn such dependencies is the length of the paths forward and backward signals have totraverse in the network. The shorter these paths between any combination of positions in the inputand output sequences, the easier it is to learn long-range dependencies [ 12]. Hence we also comparethe maximum path length between any two input and output positions in networks composed of thedifferent layer types.",
        "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentiallyexecuted operations, whereas a recurrent layer requires O(n)sequential operations. In terms ofcomputational complexity, self-attention layers are faster than recurrent layers when the sequencelengthnis smaller than the representation dimensionality d, which is most often the case withsentence representations used by state-of-the-art models in machine translations, such as word-piece[38] and byte-pair [ 31] representations. To improve computational performance for tasks involvingvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin6",
        "the input sequence centered around the respective output position. This would increase the maximumpath length to O(n=r). We plan to investigate this approach further in future work.",
        "A single convolutional layer with kernel width k<n does not connect all pairs of input and outputpositions. Doing so requires a stack of O(n=k)convolutional layers in the case of contiguous kernels,orO(logk(n))in the case of dilated convolutions [ 18], increasing the length of the longest pathsbetween any two positions in the network. Convolutional layers are generally more expensive thanrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexityconsiderably, to O(k\u0001n\u0001d+n\u0001d2). Even with k=n, however, the complexity of a separableconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,the approach we take in our model.",
        "As side benefit, self-attention could yield more interpretable models. We inspect attention distributionsfrom our models and present and discuss examples in the appendix. Not only do individual attentionheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntacticand semantic structure of the sentences.",
        "5 TrainingThis section describes the training regime for our models.",
        "5.1 Training Data and BatchingWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 millionsentence pairs. Sentences were encoded using byte-pair encoding [ 3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piecevocabulary [ 38]. Sentence pairs were batched together by approximate sequence length. Each trainingbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000target tokens.",
        "5.2 Hardware and ScheduleWe trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models usingthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. Wetrained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on thebottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps(3.5 days).",
        "5.3 OptimizerWe used the Adam optimizer [ 20] with1= 0:9,2= 0:98and\u000f= 10\u00009. We varied the learningrate over the course of training, according to the formula:",
        "lrate =d\u00000:5model\u0001min(step_num\u00000:5;step _num\u0001warmup _steps\u00001:5) (3)",
        "This corresponds to increasing the learning rate linearly for the first warmup _steps training steps,and decreasing it thereafter proportionally to the inverse square root of the step number. We usedwarmup _steps = 4000 .",
        "5.4 RegularizationWe employ three types of regularization during training:",
        "Residual Dropout We apply dropout [ 33] to the output of each sub-layer, before it is added to thesub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and thepositional encodings in both the encoder and decoder stacks. For the base model, we use a rate ofPdrop= 0:1.",
        "Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on theEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.",
        "ModelBLEU Training Cost (FLOPs)",
        "EN-DE EN-FR EN-DE EN-FRByteNet [18] 23.75Deep-Att + PosUnk [39] 39.2 1:0\u00011020GNMT + RL [38] 24.6 39.92 2:3\u000110191:4\u00011020ConvS2S [9] 25.16 40.46 9:6\u000110181:5\u00011020MoE [32] 26.03 40.56 2:0\u000110191:2\u00011020Deep-Att + PosUnk Ensemble [39] 40.4 8:0\u00011020GNMT + RL Ensemble [38] 26.30 41.16 1:8\u000110201:1\u00011021ConvS2S Ensemble [9] 26.36 41.29 7:7\u000110191:2\u00011021Transformer (base model) 27.3 38.1 3:3\u00011018Transformer (big) 28.4 41.8 2:3\u00011019Label Smoothing During training, we employed label smoothing of value \u000fls= 0:1[36]. Thishurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
        "6 Results6.1 Machine TranslationOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)",
        "in Table 2) outperforms the best previously reported models (including ensembles) by more than 2:0BLEU, establishing a new state-of-the-art BLEU score of 28:4. The configuration of this model islisted in the bottom line of Table 3. Training took 3:5days on 8P100 GPUs. Even our base modelsurpasses all previously published models and ensembles, at a fraction of the training cost of any ofthe competitive models.",
        "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41:0,outperforming all of the previously published single models, at less than 1=4the training cost of theprevious state-of-the-art model. The Transformer (big) model trained for English-to-French useddropout rate Pdrop= 0:1, instead of 0:3.",
        "For the base models, we used a single model obtained by averaging the last 5 checkpoints, whichwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. Weused beam search with a beam size of 4and length penalty= 0:6[38]. These hyperparameterswere chosen after experimentation on the development set. We set the maximum output length duringinference to input length + 50, but terminate early when possible [38].",
        "Table 2 summarizes our results and compares our translation quality and training costs to other modelarchitectures from the literature. We estimate the number of floating point operations used to train amodel by multiplying the training time, the number of GPUs used, and an estimate of the sustainedsingle-precision floating-point capacity of each GPU5.",
        "6.2 Model VariationsTo evaluate the importance of different components of the Transformer, we varied our base modelin different ways, measuring the change in performance on English-to-German translation on thedevelopment set, newstest2013. We used beam search as described in the previous section, but nocheckpoint averaging. We present these results in Table 3.",
        "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,keeping the amount of computation constant, as described in Section 3.2.2. While single-headattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.",
        "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.",
        "Table 3: Variations on the Transformer architecture. Unlisted values are identical to those of the basemodel. All metrics are on the English-to-German translation development set, newstest2013. Listedperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared toper-word perplexities.",
        "Parser Training WSJ 23 F1Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3Petrov et al. (2006) [29] WSJ only, discriminative 90.4Zhu et al. (2013) [40] WSJ only, discriminative 90.4Dyer et al. (2016) [8] WSJ only, discriminative 91.7Transformer (4 layers) WSJ only, discriminative 91.3Zhu et al. (2013) [40] semi-supervised 91.3Huang & Harper (2009) [14] semi-supervised 91.3McClosky et al. (2006) [26] semi-supervised 92.1Vinyals & Kaiser el al. (2014) [37] semi-supervised 92.1Transformer (4 layers) semi-supervised 92.7Luong et al. (2015) [23] multi-task 93.0Dyer et al. (2016) [8] generative 93.3In Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. Thissuggests that determining compatibility is not easy and that a more sophisticated compatibilityfunction than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected,bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace oursinusoidal positional encoding with learned positional embeddings [ 9], and observe nearly identicalresults to the base model.",
        "6.3 English Constituency ParsingTo evaluate if the Transformer can generalize to other tasks we performed experiments on Englishconstituency parsing. This task presents specific challenges: the output is subject to strong structural9",
        "constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequencemodels have not been able to attain state-of-the-art results in small-data regimes [37].",
        "We trained a 4-layer transformer with dmodel = 1024 on the Wall Street Journal (WSJ) portion of thePenn Treebank [ 25], about 40K training sentences. We also trained it in a semi-supervised setting,using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokensfor the semi-supervised setting.",
        "We performed only a small number of experiments to select the dropout, both attention and residual(section 5.4), learning rates and beam size on the Section 22 development set, all other parametersremained unchanged from the English-to-German base translation model. During inference, weincreased the maximum output length to input length + 300. We used a beam size of 21and= 0:3for both WSJ only and the semi-supervised setting.",
        "Our results in Table 4 show that despite the lack of task-specific tuning our model performs sur-prisingly well, yielding better results than all previously reported models with the exception of theRecurrent Neural Network Grammar [8].",
        "In contrast to RNN sequence-to-sequence models [ 37], the Transformer outperforms the Berkeley-Parser [29] even when training only on the WSJ training set of 40K sentences.",
        "7 ConclusionIn this work, we presented the Transformer, the first sequence transduction model based entirely onattention, replacing the recurrent layers most commonly used in encoder-decoder architectures withmulti-headed self-attention.",
        "For translation tasks, the Transformer can be trained significantly faster than architectures basedon recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014English-to-French translation tasks, we achieve a new state of the art. In the former task our bestmodel outperforms even all previously reported ensembles.",
        "We are excited about the future of attention-based models and plan to apply them to other tasks. Weplan to extend the Transformer to problems involving input and output modalities other than text andto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputssuch as images, audio and video. Making generation less sequential is another research goals of ours.",
        "The code we used to train and evaluate our models is available at https://github.com/tensorflow/tensor2tensor ."
    ]
}